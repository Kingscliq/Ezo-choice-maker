{"version":3,"sources":["components/Navbar.js","components/Decision.js","components/Questions.js","components/MainApp.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Component","divStyle","display","gridTemplateColumns","width","margin","height","padding","background","boxShadow","gridColumnGap","borderRadius","ul","listStyleType","li","fontSize","fontFamily","mainBtn","backgroundColor","fontWeight","color","border","cursor","buttonDiv","heading","icon","marginLeft","heading_3","Decision","props","getMostFrequentQuestion","questionsPop","sort","x","y","filter","w","length","pop","handleRandomAns","options","randomValue","Math","floor","random","setState","ans","state","randAns","this","back","answer","getRandomNumber","questions","getRandomValue","randomAnswer","popularQuestion","style","map","option","index","onClick","Questions","handleQuestionChange","handleOptionChange","mainProcess","addOption","removeInputField","addQuestion","onSubmit","for","type","placeholder","onChange","e","value","htmlFor","preventDefault","MainApp","step","target","splice","bind","componentEvaluator","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.95fcc657.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './myStyle.css'\r\n\r\nexport class Navbar extends Component {\r\n\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <nav className=\"nav-bar\">\r\n                <h1>Kings Choice Maker App</h1>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n\r\n","\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react'\r\n    \r\nconst divStyle ={\r\n    display: 'grid',\r\n    gridTemplateColumns: '1fr 1fr',\r\n    width: '760px',\r\n    margin: '20px auto',\r\n    height: '450px',\r\n    padding: '35px',\r\n    background: 'rgb(245, 243, 243)',\r\n    boxShadow: '-4px -1px 34px 0px rgba(168,153,168,1)',\r\n    gridColumnGap: '20px',\r\n    borderRadius: '30px'\r\n}\r\nconst ul = {\r\n    listStyleType : 'none',\r\n\r\n}\r\nconst li = {\r\n    fontSize: '1.1rem',\r\n    fontFamily: '\"Quicksand\", sans-serif',\r\n    margin: '10px'\r\n}\r\nconst mainBtn={\r\n    backgroundColor: '#0f51df',\r\n    fontWeight: 'bolder',\r\n    color: '#ccc',\r\n    width:'100%',\r\n    padding: ' auto',\r\n    border: 'none',\r\n    fontSize: '1.3rem',\r\n    cursor: 'pointer',\r\n    height:'70px',\r\n    margin: '10px',\r\n    borderRadius:'5px',\r\n}\r\nconst buttonDiv={\r\n    width:'100%',\r\n    padding: ' auto',\r\n    border: 'none',\r\n    fontSize: '.8rem',\r\n    cursor: 'pointer',\r\n    height:'40px',\r\n    background: '#cdcdcd',\r\n    margin: '10px'\r\n}\r\nconst heading={\r\n    fontSize: '1.5rem',\r\n    color: '#07689f !important'\r\n}\r\nconst icon={\r\n    marginLeft: '10px',\r\n    fontSize: '1rem'\r\n}\r\nconst heading_3 = {\r\n    color: '#93b8f5',\r\n\r\n}\r\n\r\nexport class Decision extends Component {\r\n   constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            ans: props.randAns,\r\n            \r\n        }\r\n   }   \r\n   getMostFrequentQuestion = () => {\r\n       const {questionsPop} = this.props\r\n\r\n        return questionsPop.sort((x,y) =>\r\n              questionsPop.filter(w => w===x).length\r\n            - questionsPop.filter(w => w===y).length\r\n        ).pop();\r\n\r\n    console.log(this)\r\n    }\r\n\r\n   handleRandomAns = ()=> {\r\n    let options,randomValue;\r\n    options = this.props.options\r\n    randomValue = options[Math.floor(Math.random() * options.length)]        \r\n       this.setState({\r\n           ans: randomValue\r\n       })\r\n   }\r\n    render() {\r\n        \r\n        const { back, answer, getRandomNumber,options, questions, getRandomValue, questionsPop } = this.props\r\n        let val = getRandomValue(options);\r\n        let randomAnswer = this.state.ans\r\n\r\n        const popularQuestion = this.getMostFrequentQuestion(questionsPop)\r\n        \r\n\r\n    \r\n        return (\r\n            <div style={divStyle}>\r\n                <div>\r\n                    <h1 style={heading}><strong>Question: </strong>{questions}</h1>\r\n                    <h3 style={heading_3}>Decision: <span style={{color:'#4287f5', fontFamily: '\"Raleway\", sans-serif'}}>{randomAnswer}</span></h3>\r\n                    <h4>&nbsp;Other Options</h4>\r\n                        <ul style={ul}>\r\n\r\n                                \r\n                                {options.map((option, index) => <li style={li}>{option}</li>)}\r\n                            <br/>\r\n                        </ul>\r\n                </div>\r\n                <div>\r\n                    <button style={mainBtn} onClick={this.handleRandomAns} >\r\n                        <i className=\"fas fa-redo\"></i>&nbsp; &nbsp; Get Another Choice</button>\r\n\r\n                    <button style={buttonDiv} onClick= {back}>Ask Another Questionr<i style={icon} className=\"fas fa-arrow-alt-circle-right\"></i>&nbsp;</button>\r\n                </div>\r\n                <div>\r\n                    <p>\r\n                        <h3>The most popular Question is:</h3>\r\n                        \r\n\r\n                       <small> {popularQuestion}</small>\r\n      \r\n\r\n\r\n                    \r\n\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n    \r\n}\r\n\r\nexport default Decision\r\n","import React, { Component } from 'react'\r\nimport './myStyle.css'\r\n\r\nexport class Questions extends Component {\r\n    render() {\r\n            const {handleQuestionChange, options, questions, handleOptionChange,mainProcess,addOption, removeInputField, addQuestion} = this.props;\r\n        return (\r\n            <div className =\"myform\">\r\n                        \r\n                    <form  onSubmit={mainProcess}>\r\n                    <div>\r\n                            <label for=\"questions\">Question</label><br/>\r\n                            <input type=\"text\" \r\n                                className=\"form-control\" \r\n                                placeholder=\"Enter a Question\" \r\n                                onChange={(e)=>handleQuestionChange(e)\r\n                    \r\n                            }\r\n                            value={questions}\r\n                            />\r\n                            <hr/>\r\n                            <br/>\r\n                            <label htmlFor=\"options\">Options</label>\r\n                                { options.map((option, index) => {\r\n                                    return(\r\n                                        <div className=\"input\">\r\n                                            <div>\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            className=\" form-control\" \r\n                                            placeholder={`${index + 1} Enter option `}\r\n                                            onChange={(e)=>handleOptionChange(e, index)}\r\n                                            value ={option}\r\n\r\n                        \r\n                                    />\r\n                                    </div>\r\n                                    <div>\r\n                                    <button className='btn-danger' onClick={(e)=> {\r\n                                            e.preventDefault()\r\n                                            \r\n                                    }}>x</button>\r\n                                    </div>\r\n                                    </div>\r\n                                    )\r\n            \r\n                                })\r\n                            }\r\n                                {/* <input type=\"text\" className=\"form-control\" placeholder=\"A:\" onChange={handleChange('option')}/>\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"B:\" onChange={handleChange('option')}/>\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"C:\" onChange={handleChange('option')}/> */}\r\n                        </div>\r\n                        <div className=\"btn-div\">\r\n                            <div>\r\n                                <button className=\"btn btn-default\" type=\"button\" onClick={() => {\r\n                                        addOption()\r\n                                        // addQuestion(questions)\r\n                                }\r\n                                    \r\n                                    }><i className=\"fas fa-plus\"></i>Add Option</button></div>             \r\n                            <div><button className=\"btn btn-success\" type=\"submit\">Answer</button></div>  \r\n                    </div> \r\n                                     \r\n                    </form>\r\n                         \r\n            </div>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default Questions\r\n","\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport Navbar from './Navbar'\r\nimport Decision from './Decision'\r\nimport Questions from './Questions'\r\n\r\nexport class MainApp extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            step: 1,\r\n            questions:'',\r\n            options: ['', ''],\r\n\r\n            questionsPop: []\r\n           \r\n            \r\n        }\r\n    }\r\n    \r\n    // Process-Form\r\n    mainProcess = () =>{\r\n        const {step} = this.state;\r\n        this.setState({\r\n            step: step + 1,\r\n            questions: this.state.questions,\r\n            \r\n           \r\n        })\r\n\r\n        this.addQuestion()\r\n        \r\n    }\r\n    \r\n\r\n    // Go back to Previous Main Page\r\n    back = () => {\r\n        const { step, questions, options } = this.state;\r\n        this.setState({\r\n            step: step - 1,\r\n            questions:'',\r\n            options: ['', ''],\r\n\r\n            questionsPop: this.state.questionsPop\r\n\r\n\r\n        })\r\n    } \r\n\r\n\r\n\r\n\r\n    // handleChange = input => e =>{\r\n    //     this.setState({\r\n    //         [input] : e.target.value\r\n    //     })\r\n    // }\r\n    handleQuestionChange = (e, index) => {\r\n        this.state.questions = e.target.value\r\n        this.setState({\r\n            questions: this.state.questions\r\n        })\r\n    }\r\n\r\n    handleOptionChange = (e, index) =>{\r\n        this.state.options[index] = e.target.value\r\n        this.setState({\r\n        options: this.state.options\r\n        })\r\n    }\r\n\r\n    //Method to add new Item to the questions Array\r\n    addOption = (e) =>{\r\n        this.setState({\r\n            options: [...this.state.options, '']\r\n        })\r\n\r\n    }\r\n    addQuestion =(e) => {\r\n\r\n        const {questions, questionsPop} = this.state\r\n\r\n\r\n        // questions\r\n        // this.setState({\r\n        //     questionsPop: [...this.state]\r\n        // })\r\n\r\n\r\n\r\n        this.setState(questionsPop => ({\r\n            questionsPop: [...this.state.questionsPop, questions]\r\n        }));\r\n\r\n    }\r\n\r\n    \r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    ///Function to get random number\r\n\r\n        \r\n    // }\r\n    getRandomValue= ()=>{\r\n         let options = this.state.options\r\n         let randomValue = options[Math.floor(Math.random() * options.length)]\r\n        \r\n        return randomValue\r\n\r\n        \r\n    }\r\n// Function to Remove Input Field\r\n    removeInputField = (index)=>{\r\n        this.state.options.splice(index, 1)\r\n        this.setState({\r\n            options: this.state.options\r\n        })\r\n        \r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n        // const options = this.state.options\r\n        // const index = Math.floor(Math.round() * options.length - 1)\r\n        // let choice = options[index]\r\n        // // \r\n        // console.log(options)\r\n     \r\n        // return choice;\r\n        \r\n    \r\n\r\n    \r\n    \r\n\r\n    render() {\r\n        const {step,questions, options, questionsPop} = this.state;\r\n        const randAns = this.getRandomValue(options)\r\n        //evalute what component is to be rendered base on the steps state\r\n        const componentEvaluator = ()=> {\r\n            switch (step) {\r\n                case 2:\r\n                    return      <Decision\r\n                    mainProcess = {this.mainProcess}\r\n                    questions={questions}\r\n                    options={options}\r\n                    back ={this.back}\r\n                    handleQuestionChange ={this.handleQuestionChange}\r\n                    handleOptionChange ={this.handleOptionChange}\r\n                    getRandomValue = {this.getRandomValue.bind(this)}\r\n                    randAns = {randAns}\r\n                    removeInputField = {this.removeInputField}\r\n                    questionsPop = {questionsPop}\r\n                    addQuestion = {this.addQuestion}\r\n                    \r\n                />\r\n                default:\r\n                    return <Questions\r\n                        mainProcess ={this.mainProcess}\r\n                        handleQuestionChange = {this.handleQuestionChange}\r\n                        handleOptionChange={this.handleOptionChange}\r\n                        questions={questions}\r\n                        options={options}\r\n                        getRandomValue={this.getRandomValue()}\r\n                        addOption = {this.addOption}\r\n                        removeInputField = {this.removeInputField}\r\n                        addQuestion = {this.addQuestion}\r\n                        questionsPop = {questionsPop}\r\n                        \r\n                    />\r\n            }\r\n\r\n        }\r\n        return (\r\n            <>\r\n                <Navbar/>\r\n                {componentEvaluator()}\r\n            </>\r\n        )\r\n    \r\n    }\r\n}\r\n\r\nexport default MainApp\r\n","import React, { Component } from 'react';\r\nimport MainApp from './components/MainApp';\r\nimport NavBar from './components/Navbar';\r\n\r\n// import './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MainApp/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}